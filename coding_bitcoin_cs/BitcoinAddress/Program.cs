using System;
using System.Linq;
using System.Runtime.InteropServices;
using NBitcoin;
using NBitcoin.DataEncoders;


namespace BitcoinAddress
{
    class Program
    {
        static void Main()
        {
            // generate a random private key
            Key privateKey = new Key();
            PubKey publicKey = privateKey.PubKey;

            Console.WriteLine("Public Key: " + publicKey);

            // get bitcoin address by using publicKey
            Console.WriteLine("mainNet bitcoin address: ");
            Console.WriteLine(publicKey.GetAddress(Network.Main));
            Console.WriteLine("testNet bitcoin address: ");
            Console.WriteLine(publicKey.GetAddress(Network.TestNet));

            // bitcoin address is made up of a version byte and the public key
            //    hash byte
            //    - these bytes are concatenated and encoded to a Base58Check
            // public key hash is generated by using a SHA256 hash on the public
            //    key then the RIPEMD160 hash is used on the SHA256 hashed
            //    public key using Big Endian notation
            //    -  RIPEMD160(SHA256(pubkey))
            var publicKeyHash = publicKey.Hash;

            Console.WriteLine("publicKeyHash: ");
            Console.WriteLine(publicKeyHash);

            var mainNetAddress = publicKeyHash.GetAddress(Network.Main);
            var testNetAddress = publicKeyHash.GetAddress(Network.TestNet);

            Console.WriteLine("Bitcoin mainNet address: ");
            Console.WriteLine(mainNetAddress);
            Console.WriteLine("Bitcoin testNet address: ");
            Console.WriteLine(testNetAddress);
        }
    }
}
